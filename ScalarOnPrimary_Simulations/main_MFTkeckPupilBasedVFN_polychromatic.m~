%This script simulates pupil-plane scalar VFN by generating a vortex phase
%pattern using the segments of the Keck primary. Conducts analysis of the
%resulting coupling maps in a manner similar to that shown for a circular
%pupil in Ruane et. al. 2019. This can be done by either loading a 'seed'
%array of tilt and piston from a matlab file, or using the analytical
%solution that is generated by default.
%Updated 12/2021 to use MFT propagation instead of FFT

clc;
clear; 
close all; 
% addpath(genpath(fullfile('VFNlib')));
% addpath(genpath(fullfile('..','falco-matlab')))
addpath(['..' filesep 'VFNlib']);
addpath(['..' filesep '..' filesep 'falco-matlab']);
addpath(['..' filesep '..' filesep 'VFN-Lab' filesep 'AnalysisCode' filesep 'AnalysisLib']); 

% Provide path where the DM Basis file is located
dmBasisPath = '/media/Data_Drive/VFN/ScalarOnPrimaryData/';
%% Input parameters 

%-- Provide regular parameters
% Define sampling info
inpar.N = 2^10; % Size of computational grid (NxN samples) 
inpar.apRad = inpar.N/2-4; % Aperture radius in samples
inpar.apDia0 = 2 * inpar.apRad;

%-- Define wavelength info
inpar.lambda0 = 2.2e-6; %central wavelength
% fracBW = 0.2; % \Delta\lambda/\lambda
inpar.fracBW = 0.1818; %\Delta\lambda/\lambda
inpar.numWavelengths = 51; % number of discrete wavelengths 
inpar.lambdas = getWavelengthVec(inpar.lambda0, inpar.fracBW, inpar.numWavelengths);% array of wavelengths (meters)

inpar.keckD = 10.949;
% inpar.lam0OverD = inpar.lambdas(ceil(inpar.numWavelengths / 2)) / inpar.keckD;

%-- Define charge of the vortex mask at each wavelength
inpar.charge = 2*ones(1,inpar.numWavelengths); % achromatic

%-- Define wavefront error at the central wavelength
  % 1) Pist, Tip, Tilt, defoc, ob.astig, ver.astig, ver.coma, hor.coma,
  % 9) ver.tref, ob.tref, spher
inpar.nolls = 4:8;
inpar.coeffs = [0.0, 0.0, 0.0, 0.0, 0.0];  % [Waves RMS]

%-- Give offsets for the vortex mask
inpar.offsetX = 0;    % [samples in the pupil-plane]
inpar.offsetY = 0; 

%-- Parameters for SMF (Thorlabs SM600 in this case)
%     % link: https://www.thorlabs.com/NewGroupPage9_PF.cfm?ObjectGroup_ID=949
fiber_props.core_rad = 5.5e-6;% Core radius [um]
fiber_props.n_core = 1.4436;% core index (interp @220nm)
fiber_props.n_clad = 1.4381;% cladding index (interp @220nm)
fiber_props.type = 'gaussian';

%-- Define parameters for falco MFT propagator
%<> NEED TO FIGURE THESE OUT
    % these don't matter in themselves as long as they are consistent w/ each 
    % other and with lambda
% OPTION 1: define focal length and pup diameter manually
%foc = 11e-3;      %[m] final focal length
DPup = 2.45e-3;    %[m] pupil size 
% OPTION 2: solve for focal length based on ideal Fnum and pup diameter
Fnum = getMFD(fiber_props,inpar.lambda0)/(inpar.lambda0*1.4); % focal ratio of the beam at the fiber
foc = Fnum*DPup;
fprintf('Focus in use: %f [mm]\n',foc*1e3)

% Since using falco MFT propogator, can choose our final image sampling
lambda0Fnum_samp = 51; %[samples/ (lam0 F#)] in units of samples in the image plane
im_size = 10;    %[lam0/D] field of view in final image plane

inpar.numRings = 3;
inpar.wGap = 25.4/10916*inpar.apDia0/2;

%% Generate the coordinate system

%-- Coordinates in the focal plane
coordsPP = generateCoordinates(inpar.N);% Creates NxN arrays with coordinates 
% Helpful for plotting: get axes coords in pupil radii
inpar.xvalsPP = coordsPP.xvals/inpar.apRad;
inpar.yvalsPP = coordsPP.yvals/inpar.apRad;
% Used in generateVortexMaskKeckPrimary
inpar.xvals = inpar.xvalsPP;
inpar.yvals = inpar.yvalsPP;

%-- Coordinates in the pupil plane
Nxi = im_size*lambda0Fnum_samp;
coordsFP = generateCoordinates( Nxi );
% Helpful for plotting: get axes coords in lam/D 
inpar.xvalsFP = coordsFP.xvals/lambda0Fnum_samp;
inpar.yvalsFP = coordsFP.yvals/lambda0Fnum_samp;

%-- Key values for getting scaling right using falco MFT propagator
% Lambda over D of central wavelength in meters at final focal plane 
lambda0Fnum_meters = inpar.lambda0*foc/DPup;     
% "pixel" size in pupil and image planes
coordsPP.dx  = DPup/(2*inpar.apRad);   % meters/sample
coordsFP.dx = lambda0Fnum_meters/lambda0Fnum_samp;     % meters/sample

%% Create array with pupil function

PUPIL = makeKeckPupil(2*inpar.apRad, inpar.N );
totalPower0 = sum(abs(PUPIL(:)));
% [normI, totalPower0] = getNormalization(PUPIL);% Normalization factors

% inpar.lambdaOverD = inpar.N/inpar.apRad/2; % lam/D in units of samples in the image plane
inpar.lam0OverD_meters = lambda0Fnum_meters/foc; %inpar.lambda0/inpar.keckD; %lambda0Fnum_meters; 


figure();
imagesc(inpar.xvalsPP,inpar.yvalsPP,PUPIL); 
axis image;
axis([-1 1 -1 1]);
title('Keck Primary Pupil');
colorbar; 
colormap(parula(256));
drawnow;

addpath(['..' filesep '..' filesep 'falco-matlab' filesep 'lib' filesep 'utils']);

%% Broadband PSF w/o Vortex (need to implement for keck pupil in current implementaion)

% phz = generateZernike_fromList( inpar.nolls, inpar.coeffs, PUPIL, inpar.apRad, coordsPP);
% 
% Epup = nan(inpar.N,inpar.N,inpar.numWavelengths);
% for ch = 1:inpar.numWavelengths
%     
%     Epup(:,:,ch) = exp(1i*phz*inpar.lambda0/inpar.lambdas(ch)).*PUPIL;
%     
%     subplot(1,inpar.numWavelengths,ch);
%     imagesc(inpar.xvalsPP,inpar.yvalsPP,angle(Epup(:,:,ch)));
%     axis image; 
%     axis([-1 1 -1 1]);
%     title(['Phase at ',num2str(inpar.lambdas(ch)*1e9),'nm']);
%     colorbar; 
%     colormap(parula(256));
% end


 %% Define pupil field with vortex mask

%-- Load a pregenerated seed below
%initial = load('exampleFile.mat','optimum');
%disp(optSeed);

%Scalar Phase Plate (Circular Baseline)
phz = generateVortexMask( inpar.charge, coordsPP, [0 0] );
central_band_index = ceil(inpar.numWavelengths/2);
phz = angle(phz(:,:,ceil(inpar.numWavelengths/2)));
ptype = 'Scalar Spiral Phase Plate';

% Segmented Primary Vortex Phase Pattern
% phz = generateVortexMaskKeckPrimary(inpar);%angle(makeKeckPupilInputs( inputs, initial));
% ptype = 'Segmented Primary Mirror';

% Deformable Mirror Vortex Pase Pattern
% phz = generateDMVortex(dmBasisPath);
% ptype = 'Deformable Mirror';

% Phase pattern plot
figure();
imagesc(phz); 
axis image; 
colorbar;
colormap(hsv);
set(gca,'ydir','normal')
title(['Charge 2 ' ptype ' Vortex Phase (radians)'])
caxis([-pi pi])

%phz(:,:,ch) = angle(makeKeckPupilPhz(inputs.apDia0, inputs.N, inputs.charge));
%phz = angle(makeKeckPupilPhase(2*apRad,N,chargeC));
%phz2 = angle(makeKeckPupilField(2*apRad,N));

% Phase pattern w/ pupil
figure();
Epup = nan(inpar.N,inpar.N,inpar.numWavelengths);
for ch = 1:inpar.numWavelengths
    
    Epup(:,:,ch) = exp(1i*phz*inpar.lambda0/inpar.lambdas(ch)).*PUPIL;
    
    subplot(1,inpar.numWavelengths,ch);
    imagesc(inpar.xvalsPP,inpar.yvalsPP,angle(Epup(:,:,ch)));
    axis image; 
    axis xy;
    axis([-1 1 -1 1]);
    title(['Phase at ',num2str(inpar.lambdas(ch)*1e9),'nm']);
    colorbar; 
    colormap(hsv);
end
drawnow;

figure()
imagesc(inpar.xvalsPP,inpar.yvalsPP,angle(Epup(:,:,ceil(inpar.numWavelengths/2))));
axis image; 
axis xy;
axis([-1 1 -1 1]);
title(['Spiral Phase Plate vortex on Keck primary pupil at ',num2str(inpar.lambdas(ch)*1e9),'nm']);
colorbar; 
colormap(hsv);

%% Get PSF with vortex mask
addpath(['..' filesep '..' filesep 'falco-matlab' filesep 'lib' filesep 'propcustom']);

[iPSFv_BB, PSFv] = getPSF_mft(Epup, inpar.lambdas, foc, coordsPP, coordsFP);


figure()
imagesc(inpar.xvalsFP,inpar.yvalsFP,iPSFv_BB);
axis image; 
axis([-3 3 -3 3]);
title('Charge 2 Broadband PSF w/ Vortex');
colorbar;%caxis([-3 0])
colormap(parula(256));
drawnow;

%% Generate fibermode at each lambda     
%-- Iterate through wavelengths generating modes
fibmode = nan(Nxi, Nxi, inpar.numWavelengths);
for ch = 1:inpar.numWavelengths
    % Generate the fiber mode for this wavelength with proper scaling
	fibmode(:,:,ch) = generateSMFmode_mft( fiber_props, inpar.lambdas(ch), coordsFP.dx, coordsFP);
    
end

%% Calculate Throughputs
%-- Get null depth (using overlap integral)
eta_onAx = nan(1,inpar.numWavelengths);
for ch = 1:inpar.numWavelengths
    eta_onAx(ch) = (abs(sum(sum(PSFv(:,:,ch).*fibmode(:,:,ch)))).^2)/totalPower0;
end

%-- Compute 2D coupling map
eta_maps = zeros(Nxi,Nxi,inpar.numWavelengths);
for ch = 1:inpar.numWavelengths
    % Compute the monochromatic coupling map (spatial units of lambda/D)
    eta_maps(:,:,ch) = generateCouplingMap( fibmode(:,:,ch), PSFv(:,:,ch), totalPower0, 5*lambda0Fnum_samp, coordsFP);

end

disp('Key Coupling Points:')
for ch = 1:inpar.numWavelengths
    fprintf('lambda = %f nm,    on-axis coup = %e,    max = %f %%\n',inpar.lambdas(ch)*1e9, eta_onAx(ch), max(eta_maps(:,:,ch),[],'all')*100);
end

%% Display coupling maps
%-- Linear scale
figure();
for ch = 1:inpar.numWavelengths
    subplot(1,inpar.numWavelengths,ch);
    imagesc(inpar.xvalsFP,inpar.yvalsFP,eta_maps(:,:,ch));
    axis image; 
    axis([-3 3 -3 3]);
    title(['\eta at ',num2str(inpar.lambdas(ch)*1e9),'nm']);
    colorbar; 
    colormap(gray(256));
end
drawnow

%-- Log Scale
figure();
for ch = 1:inpar.numWavelengths
    subplot(1,inpar.numWavelengths,ch);
    imagesc(inpar.xvalsFP,inpar.yvalsFP,log10(eta_maps(:,:,ch)));
    axis image; 
    axis([-3 3 -3 3]);
    title(['log10(\eta) at ',num2str(inpar.lambdas(ch)*1e9),'nm']);
    colorbar; 
    colormap(gray(256));
end
drawnow

%% Display broadband coupling map if applicable
% This is what the photodiode should see when broadband light is applied

if inpar.numWavelengths > 1
    % Compute BB coupling map as average of all coupling maps
      % (This assumes the input spectrum is is flat --> ie. equal power at
      % all wavelengths)
    eta_map_BB = mean(eta_maps,3);
    
    % Plot Linear Scale
    figure();
    imagesc(inpar.xvalsFP, inpar.yvalsFP, eta_map_BB);
    axis image;
    axis([-3 3 -3 3]);
    title('Charge 2 Broadband \eta');
    colorbar;
    colormap(gray(256));
    
    % Plot Log Scale
    figure();
    imagesc(inpar.xvalsFP, inpar.yvalsFP, log10(eta_map_BB));
    axis image;
    axis([-3 3 -3 3]);
    title('Broadband log10(\eta)');
    colorbar;
    colormap(gray(256));
    
    % Print key values
    disp('---')
    fprintf('Broadband Performance:     on-axis coup = %e,    max = %f %%\n', mean(eta_onAx), max(eta_map_BB,[],'all')*100);
end

%% Characterize Null Location
%-- find the centroid of eta_maps(:,:,ch)
%-- find min in centroid
%-- find coordinates of this min in eta_maps
%-- plot the difference in these coordinates in x and y position from the
%   origin, with lambda corresponding to ch on the bottom and offset on the
%   left
% 
%-- Finds the radius of the centroid to crop the image to depending on the maximum eta in 1 slice
%   of eta_maps(:,:,ch)

Xshift = zeros(inpar.numWavelengths,1);
Yshift = zeros(inpar.numWavelengths,1);
etas = zeros(inpar.numWavelengths, 1);

for ch = 1:inpar.numWavelengths 
    map = eta_maps(:,:,ch); %one slice of the eta_maps cube
    map_max = max(map,[],'all'); %the maximum value in cmap
    [max_ind(1),max_ind(2)] = find(map_max==map,1); %linear coordinates of max value
    max_rho = sqrt(((Nxi/2+1)-max_ind(1))^2 + ((Nxi/2+1)-max_ind(2))^2);
    
    crp = 1.5*max_rho; %The length of one side of the cube to crop the image to

    cmap = map(end/2+1-floor(crp/2):end/2+1+floor(crp/2),end/2+1-floor(crp/2):end/2+1+floor(crp/2)); %the centroid
    cmap_min = min(cmap,[],'all'); %minimum value in the centroid
    [min_ind(1),min_ind(2)] = find(cmap_min==cmap); %indices of minimum value in the centroid
    min_ind = min_ind + (Nxi/2-floor(crp/2)); %adjust min values to reflect position in map, not cmap
   
    Xshift(ch) = Nxi/2+1-min_ind(2); %x value is wavelength, y value is offset
    Yshift(ch) = Nxi/2+1-min_ind(1);%^
    
    etas(ch) = cmap_min;
end

%change lambdaOverD here 
inpar.lambdaOverD = lambda0Fnum_samp; %inpar.N/inpar.apRad/2; % lam/D in units of samples in the image plane

%-- Null shift plots for X, Y, and the trendlines that result
figure();
subplot(2,2,1);
plot(inpar.lambdas/inpar.lambda0,Xshift/inpar.lambdaOverD, '-o', 'Color', 'r');
title('Xshift');
subplot(2,2,2);
plot(inpar.lambdas/inpar.lambda0,Yshift/inpar.lambdaOverD, '-o', 'Color', 'b');
title('Yshift');

px = polyfit(inpar.lambdas/inpar.lambda0,Xshift'/inpar.lambdaOverD,1);
pxy = polyval(px,inpar.lambdas/inpar.lambda0);
subplot(2,2,3);
plot(inpar.lambdas/inpar.lambda0,pxy,'-o','Color','m')
title('X Offset Trend')
txt = ['p value: ' num2str(px(1))];
text(mean(inpar.lambdas/inpar.lambda0),mean(pxy),txt);

py_1 = polyfit(inpar.lambdas/inpar.lambda0,Yshift'/inpar.lambdaOverD,1);
pyy = polyval(py_1,inpar.lambdas/inpar.lambda0);
subplot(2,2,4);
plot(inpar.lambdas/inpar.lambda0,pyy,'-o','Color','g');
title('Y Offset Trend')
txt = ['p value: ' num2str(py_1(1))];
text(mean(inpar.lambdas/inpar.lambda0),mean(pyy),txt);

%-- Null value vs wavelength offset from central wavelength
figure();
subplot(1,1,1);
semilogy(inpar.lambdas/inpar.lambda0,eta_onAx','-o','Color','r'); %lambdas/lambda0,,'-o','Color','r'
title(['Charge 2 ' ptype ' VFN Null Value vs \lambda/\lambda0'])
xlabel('\lambda/\lambda0')
ylabel('\eta')
grid on

%-- Actual positional offset of null for x and y overlayed
figure();
plot(inpar.lambdas/inpar.lambda0,Xshift/inpar.lambdaOverD, '-o', 'Color', 'r');
hold on
plot(inpar.lambdas/inpar.lambda0,Yshift/inpar.lambdaOverD, '-o', 'Color', 'b');
legend({'Xshift', 'Yshift'}, 'Location', 'SouthEast');
title('Null Movement')
xlabel('\lambda/\lambda_0')
ylabel('Null Shift [\lambda/D]')
grid on

%-- Overlay of trends in x and y null positional offset
figure();
plot(inpar.lambdas/inpar.lambda0,pxy,'-o','Color','r');
hold on
plot(inpar.lambdas/inpar.lambda0,pyy,'-o','Color','b');
legend({'Xshift', 'Yshift'}, 'Location', 'SouthEast');
title(['Charge 2 ' ptype ' Vortex Induced Null Movement'])
xlabel('\lambda/\lambda_0')
ylabel('Null Shift [\lambda/D]')
txt = ['Y Shift Slope p = ' num2str(py_1(1)) newline 'X Shift Slope p = ' num2str(px(1))]; %newline 'x trend p value: ' num2str(px)];
text(0.91,0.08,txt);
grid on

% Show the Deepest Null
% figure();
% imagesc(inpar.xvalsFP, inpar.yvalsFP, eta_map_BB);
% plot(min_ind_
% axis image;
% axis([-3 3 -3 3]);
% title('Broadband \eta');
% colorbar;
% colormap(gray(256));

%% Compute the relative integration time
etamean = mean(eta_maps,3);

map_max = max(etamean,[],'all'); %the maximum value in cmap
[max_ind(1),max_ind(2)] = find(map_max==etamean,1); %linear coordinates of max value
max_rho = sqrt(((Nxi/2+1)-max_ind(1))^2 + ((Nxi/2+1)-max_ind(2))^2);
    
crp = 1.5*max_rho; %The length of one side of the cube to crop the image to

cmapmean = etamean(end/2+1-floor(crp/2):end/2+1+floor(crp/2),end/2+1-floor(crp/2):end/2+1+floor(crp/2)); %the centroid
eta_s = min(cmapmean,[],'all'); %minimum value in the centroid
[min_ind(1),min_ind(2)] = find(eta_s==cmapmean); %indices of minimum value in the centroid
min_ind = min_ind + (Nxi/2-floor(crp/2)); %adjust min values to reflect position in map, not cmap
        
eta_sX = min_ind(2);
eta_sY = min_ind(1);

[radProf2, ~] = VFN_An_radAverage(map,[eta_sX, eta_sY]);
[radMx, ~] = max(radProf2);

%Compute the relative integration time here
reltints = eta_s./(radMx.^2);
fprintf(['Relative Integration Time: ' num2str(reltints) '\n']);




