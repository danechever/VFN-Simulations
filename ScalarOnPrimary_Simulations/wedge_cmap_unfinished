%% Apply Wedge Effects

figure(9);
for ch = 1:inputs.numWavelengths
    
    refractive_index = getRefractiveIndex('NBK7', 1e6*inputs.lambda0);
    wedge_angle = atan((py_1(1)*1e6*inputs.lambda0)/(10.949*(refractive_index-1)));
   
    if ch == 1 %ceil(inputs.numWavelengths)
        phzw = phz + 2*pi*getWedgeOffset(wedge_angle,1e6*inputs.lambdas(ch))...
            *(10.949/inputs.lambda0)*inputs.lambdaOverD*coords.Y/inputs.N;
        Epup(:,:,ch) = exp(1i*phzw*inputs.lambda0/inputs.lambdas(ch)).*PUPIL;
%     elseif ch > ceil(inputs.numWavelengths)
%         phzw = phz - 2*pi*getWedgeOffset(wedge_angle,1e6*inputs.lambdas(ch))*inputs.lambdaOverD*coords.Y/inputs.N;
%         Epup(:,:,ch) = exp(1i*phzw*inputs.lambda0/inputs.lambdas(ch)).*PUPIL;
    else
        Epup(:,:,ch) = exp(1i*phz*inputs.lambda0/inputs.lambdas(ch)).*PUPIL;
    end
    
    subplot(1,inputs.numWavelengths,ch);
    imagesc(xvals/inputs.apRad,yvals/inputs.apRad,angle(Epup(:,:,ch)));
    axis image; 
    axis xy;getWedgeOffset(wedge_angle,1e6*inputs.lambdas(ch))
    axis([-1 1 -1 1]);
    title(['Phase at ',num2str(inputs.lambdas(ch)*1e9),'nm']);
    colorbar; 
    colormap(hsv(256));
end

%% Resimulate the Coupling Maps with wedge applied
eta_maps = generateCouplingMap_polychromatic( Epup, fiber_props, inputs.lambda0, Fnum, inputs.lambdas, totalPower0, inputs.lambdaOverD, 3*inputs.lambdaOverD, coords);

figure(10);
for ch = 1:inputs.numWavelengths
    subplot(1,inputs.numWavelengths,ch);
    imagesc(xvals/inputs.lambdaOverD,yvals/inputs.lambdaOverD,log10(eta_maps(:,:,ch)));
    axis image; 
    axis([-2 2 -2 2]);
    caxis([-3 -0.5])
    title(['\eta at ',num2str(inputs.lambdas(ch)*1e9),'nm']);
    colorbar;
    colormap(gray(256));
end

Xshift = zeros(inputs.numWavelengths,1);
Yshift = zeros(inputs.numWavelengths,1);
etas = zeros(inputs.numWavelengths, 1);

for ch = 1:inputs.numWavelengths 
    map = eta_maps(:,:,ch); %one slice of the eta_maps cube
    map_max = max(map,[],'all'); %the maximum value in cmap
    [max_ind(1),max_ind(2)] = find(map_max==map,1); %linear coordinates of max value
    max_rho = sqrt(((inputs.N/2+1)-max_ind(1))^2 + ((inputs.N/2+1)-max_ind(2))^2);
    
    crp = 2*max_rho; %The length of one side of the cube to crop the image to

    cmap = map(end/2+1-floor(crp/2):end/2+1+floor(crp/2),end/2+1-floor(crp/2):end/2+1+floor(crp/2)); %the centroid
    cmap_min = min(cmap,[],'all'); %minimum value in the centroid
    [min_ind(1),min_ind(2)] = find(cmap_min==cmap); %indices of minimum value in the centroid
    min_ind = min_ind + (inputs.N/2-floor(crp/2)); %adjust min values to reflect position in map, not cmap
   
    Xshift(ch) = inputs.N/2-min_ind(2); %x value is wavelength, y value is offset
    Yshift(ch) = inputs.N/2-min_ind(1);%^
    
    etas(ch) = cmap_min;
end

%-- Null shift plots for X, Y, and the trendlines that result
figure(11);
subplot(2,2,1);
plot(inputs.lambdas/inputs.lambda0,Xshift/inputs.lambdaOverD, '-o', 'Color', 'r');
title('Xshift');
subplot(2,2,2);
plot(inputs.lambdas/inputs.lambda0,Yshift/inputs.lambdaOverD, '-o', 'Color', 'b');
title('Yshift');

px = polyfit(inputs.lambdas/inputs.lambda0,Xshift'/inputs.lambdaOverD,1);
pxy = polyval(px,inputs.lambdas/inputs.lambda0);
subplot(2,2,3);
plot(inputs.lambdas/inputs.lambda0,pxy,'-o','Color','m')
title('X Offset Trend')
txt = ['p value: ' num2str(px)];
text(mean(inputs.lambdas/inputs.lambda0),mean(pxy),txt);

py = polyfit(inputs.lambdas/inputs.lambda0,Yshift'/inputs.lambdaOverD,1);
pyy = polyval(py,inputs.lambdas/inputs.lambda0);
subplot(2,2,4);
plot(inputs.lambdas/inputs.lambda0,pyy,'-o','Color','g');
title('Y Offset Trend')
txt = ['p value: ' num2str(py)];
text(mean(inputs.lambdas/inputs.lambda0),mean(px),txt);

%-- Null value vs wavelength offset from central wavelength
figure(12);
subplot(1,1,1);
semilogy(inputs.lambdas/inputs.lambda0,etas,'-o','Color','r'); %lambdas/lambda0,,'-o','Color','r'
title('Null Value vs \lambda/\lambda0')
xlabel('\lambda/\lambda0')
ylabel('\eta')
grid on

%-- Actual positional offset of null for x and y overlayed
figure(13);
plot(inputs.lambdas/inputs.lambda0,Xshift/inputs.lambdaOverD, '-o', 'Color', 'r');
hold on
plot(inputs.lambdas/inputs.lambda0,Yshift/inputs.lambdaOverD, '-o', 'Color', 'b');
legend({'Xshift', 'Yshift'}, 'Location', 'SouthEast');
title('Null Movement')
xlabel('\lambda/\lambda_0')
ylabel('Null Shift [\lambda/D]')
grid on

%-- Overlay of trends in x and y null positional offset
figure(14);
plot(inputs.lambdas/inputs.lambda0,pxy,'-o','Color','r');
hold on
plot(inputs.lambdas/inputs.lambda0,pyy,'-o','Color','b');
legend({'Xshift', 'Yshift'}, 'Location', 'SouthEast');
title('Null Movement')
xlabel('\lambda/\lambda_0')
ylabel('Null Shift [\lambda/D]')
txt = ['y trend p value: ' num2str(py) newline 'x trend p value: ' num2str(px)];
text(mean(inputs.lambdas/inputs.lambda0),mean(px),txt);
grid on
