%This script simulates pupil-plane scalar VFN by generating a vortex phase
%pattern using the segments of the Keck primary. Conducts analysis of the
%resulting coupling maps in a manner similar to that shown for a circular
%pupil in Ruane et. al. 2019. This can be done by either loading a 'seed'
%array of tilt and piston from a matlab file, or using the analytical
%solution that is generated by default.
%Created 03/2023 to verify UNCORRECTED SVFN performance
% HOME PATH FOR THIS FILE - \VFN-Simulations\ScalarOnPrimary_Simulations

clc;
clear; 
close all;

cd ..\vfnlib

% Import Python functions
% py.importlib.import_module('numpy');
% py.importlib.import_module('sellmeir1');
% py.importlib.import_module('triple_prism');
% py.importlib.import_module('singleprism');

cd ..\ScalarOnPrimary_Simulations

% Set Paths
user = getenv('username');
addpath(genpath(fullfile('..','VFNlib')));
addpath(genpath(fullfile('..','..','falco-matlab')));
addpath(genpath(fullfile('..','..','VFN-Lab')));
% addpath(genpath(fullfile('..','..','ADC')));
% addpath(['C:\Users\' user '\OneDrive - California Institute of Technology\School Stuff\Research\VFN\ADC\RayTrace']);
% addpath(['C:\Users\' user '\OneDrive - California Institute of Technology\School Stuff\Research\VFN\ADC\materials']);

%% Load Input Parameters

% Edit this .m file to configure the basic parameters of the simulation
sppvfnConfig;

%% Generate Coordinate System

sppvfnCoordSysConfig;

% coordsPP.dx = 10.949/(2*inpar.apRad);

inpar.coordsPP = coordsPP;
inpar.coordsFP = coordsFP;

%% Create array with pupil function

%Edit pupilType to use a different pupil
%***CAUTION***
%May need to modify input parameters
pupilType = 'keck';

PUPIL = genPup(pupilType, inpar);

totalPower0 = sum(abs(PUPIL(:)));

inpar.lam0OverD_meters = lambda0Fnum_meters/foc;

%Displays the selected pupil
figure();
imagesc(inpar.xvalsPP,inpar.yvalsPP,PUPIL); 
axis image;
axis([-1 1 -1 1]);
title('Pupil');
colorbar; 
colormap(parula(256));
drawnow;

addpath(['..' filesep '..' filesep 'falco-matlab' filesep 'lib' filesep 'utils']);

 %% Define pupil field with vortex mask
 
addpath(['..' filesep '..' filesep 'falco-matlab' filesep 'lib' filesep 'masks']);
 
vType = 'spp'; %OPTIONS: Spiral Phase Plate 'spp', Spiral Phased Mirror 'spm', Deformable Mirror 'dm'

[phz, pType] = vortexSelection(vType, inpar);
 
% Phase pattern plot
figure();
imagesc(phz); 
axis image; 
colorbar;
colormap(hsv);
set(gca,'ydir','normal')
title(['Charge ' num2str(inpar.charge) ' '  pType ' Vortex Phase (radians)']);
caxis([-pi pi]);

% Phase pattern w/ pupil
% figure();
Epup = nan(inpar.N,inpar.N,inpar.numWavelengths);
for ch = 1:inpar.numWavelengths
    
    Epup(:,:,ch) = exp(1i*phz*inpar.lambda0/inpar.lambdas(ch)).*PUPIL;
    
%     subplot(1,inpar.numWavelengths,ch);
%     imagesc(inpar.xvalsPP,inpar.yvalsPP,angle(Epup(:,:,ch)));
%     axis image; 
%     axis xy;
%     axis([-1 1 -1 1]);
%     title(['Phase at ',num2str(inpar.lambdas(ch)*1e9),'nm']);
%     colorbar; 
%     colormap(hsv);
end
% drawnow;

figure();
imagesc(inpar.xvalsPP,inpar.yvalsPP,angle(Epup(:,:,ceil(inpar.numWavelengths/2))));
axis image; 
axis xy;
axis([-1 1 -1 1]);
title([pType ' vortex on Keck primary pupil at ',num2str(inpar.lambdas(ch)*1e9),'nm']);
colorbar; 
colormap(hsv);

%% Get PSF with vortex mask
addpath(['..' filesep '..' filesep 'falco-matlab' filesep 'lib' filesep 'propcustom']);

[iPSFv_BB, PSFv] = getPSF_mft(Epup, inpar.lambdas, foc, coordsPP, coordsFP);

figure();
imagesc(inpar.xvalsFP,inpar.yvalsFP,iPSFv_BB);
axis image; 
axis([-3 3 -3 3]);
title(['Charge ' num2str(inpar.charge) ' Broadband PSF w/ Vortex']);
colorbar;%caxis([-3 0])
colormap(parula(256));
drawnow;

%% Generate fibermode at each lambda     
%-- Iterate through wavelengths generating modes
fibmode = nan(Nxi, Nxi, inpar.numWavelengths);
for ch = 1:inpar.numWavelengths
    % Generate the fiber mode for this wavelength with proper scaling
	fibmode(:,:,ch) = generateSMFmode_mft(fiber_props, inpar.lambdas(ch), coordsFP.dx, coordsFP);
    
end

%% Calculate Throughputs
%-- Get null depth (using overlap integral)
eta_onAx = nan(1,inpar.numWavelengths);
for ch = 1:inpar.numWavelengths
    eta_onAx(ch) = (abs(sum(sum(PSFv(:,:,ch).*fibmode(:,:,ch)))).^2)/totalPower0;
end

%-- Compute 2D coupling map
eta_maps = zeros(Nxi,Nxi,inpar.numWavelengths);
for ch = 1:inpar.numWavelengths
    % Compute the monochromatic coupling map (spatial units of lambda/D)
    eta_maps(:,:,ch) = generateCouplingMap( fibmode(:,:,ch), PSFv(:,:,ch), totalPower0, 5*lambda0Fnum_samp, coordsFP);

end

disp('Key Coupling Points:')
for ch = 1:inpar.numWavelengths
    fprintf('lambda = %f nm,    on-axis coup = %e,    max = %f %%\n',inpar.lambdas(ch)*1e9, eta_onAx(ch), max(eta_maps(:,:,ch),[],'all')*100);
end

%% Display broadband coupling map if applicable
% This is what the photodiode should see when broadband light is applied

if inpar.numWavelengths > 1
    % Compute broadband (BB) coupling map as average of all coupling maps
      % (This assumes the input spectrum is is flat --> ie. equal power at
      % all wavelengths)
    eta_map_BB = mean(eta_maps,3);
    
    % Plot Linear Scale
    figure();
    imagesc(inpar.xvalsFP, inpar.yvalsFP, eta_map_BB);
    axis image;
    axis([-3 3 -3 3]);
    title('Charge 1 Broadband \eta');
    colorbar;
    colormap(gray(256));
    
    % Plot Log Scale
    figure();
    imagesc(inpar.xvalsFP, inpar.yvalsFP, log10(eta_map_BB));
    axis image;
    axis([-3 3 -3 3]);
    title('Broadband log10(\eta)');
    colorbar;
    colormap(gray(256));
    
    % Print key values
    disp('---')
    fprintf('Broadband Performance:     on-axis coup = %e,    max = %f %%\n', mean(eta_onAx), max(eta_map_BB,[],'all')*100);
end

%% Characterize Null Location
%-- find the centroid of eta_maps(:,:,ch)
%-- find min in centroid
%-- find coordinates of this min in eta_maps
%-- plot the difference in these coordinates in x and y position from the
%   origin, with lambda corresponding to ch on the bottom and offset on the
%   left
% 
%-- Finds the radius of the centroid to crop the image to depending on the maximum eta in 1 slice
%   of eta_maps(:,:,ch)

Xshift = zeros(inpar.numWavelengths,1);
Yshift = zeros(inpar.numWavelengths,1);
etas = zeros(inpar.numWavelengths, 1);

for ch = 1:inpar.numWavelengths 
    map = eta_maps(:,:,ch); %one slice of the eta_maps cube
    map_max = max(map,[],'all'); %the maximum value in cmap
    [max_ind(1),max_ind(2)] = find(map_max==map,1); %linear coordinates of max value
    max_rho = sqrt(((Nxi/2+1)-max_ind(1))^2 + ((Nxi/2+1)-max_ind(2))^2);
    
    crp = 1.5*max_rho; %The length of one side of the cube to crop the image to

    cmap = map(end/2+1-floor(crp/2):end/2+1+floor(crp/2),end/2+1-floor(crp/2):end/2+1+floor(crp/2)); %the centroid
    cmap_min = min(cmap,[],'all'); %minimum value in the centroid
    [min_ind(1),min_ind(2)] = find(cmap_min==cmap); %indices of minimum value in the centroid
    min_ind = min_ind + (Nxi/2-floor(crp/2)); %adjust min values to reflect position in map, not cmap
   
    Xshift(ch) = Nxi/2+1-min_ind(2); %x value is wavelength, y value is offset
    Yshift(ch) = Nxi/2+1-min_ind(1);%^
    
    etas(ch) = cmap_min;
end

%change lambdaOverD to units of samples in the image plane here
inpar.lambdaOverD = lambda0Fnum_samp; %inpar.N/inpar.apRad/2; % lam/D in units of samples in the image plane

%-- Null shift plots for X, Y, and the trendlines that result
figure();
subplot(2,2,1);
plot(inpar.lambdas/inpar.lambda0,Xshift/inpar.lambdaOverD, '-o', 'Color', 'r');
title('Xshift');
subplot(2,2,2);
plot(inpar.lambdas/inpar.lambda0,Yshift/inpar.lambdaOverD, '-o', 'Color', 'b');
title('Yshift');

px = polyfit(inpar.lambdas/inpar.lambda0,Xshift'/inpar.lambdaOverD,1);
pxy = polyval(px,inpar.lambdas/inpar.lambda0);
subplot(2,2,3);
plot(inpar.lambdas/inpar.lambda0,pxy,'-o','Color','m')
title('X Offset Trend')
txt = ['p value: ' num2str(px(1))];
text(mean(inpar.lambdas/inpar.lambda0),mean(pxy),txt);

py = polyfit(inpar.lambdas/inpar.lambda0,Yshift'/inpar.lambdaOverD,1);
pyy = polyval(py,inpar.lambdas/inpar.lambda0);
subplot(2,2,4);
plot(inpar.lambdas/inpar.lambda0,pyy,'-o','Color','g');
title('Y Offset Trend')
txt = ['p value: ' num2str(py(1))];
text(mean(inpar.lambdas/inpar.lambda0),mean(pyy),txt);

%-- Null value vs wavelength offset from central wavelength
figure();
subplot(1,1,1);
semilogy(inpar.lambdas/inpar.lambda0,eta_onAx','-o','Color','r'); %lambdas/lambda0,,'-o','Color','r'
ylim([1e-8 1]);
title(['Charge ' num2str(inpar.charge) ' ' pType ' VFN Null Value vs \lambda/\lambda0'])
xlabel('\lambda/\lambda0')
ylabel('\eta')
grid on

%-- Actual positional offset of null for x and y overlayed
figure();
plot(inpar.lambdas/inpar.lambda0,Xshift/inpar.lambdaOverD, '-o', 'Color', 'r');
hold on
plot(inpar.lambdas/inpar.lambda0,Yshift/inpar.lambdaOverD, '-o', 'Color', 'b');
legend({'Xshift', 'Yshift'}, 'Location', 'NorthWest');
title('Null Movement')
xlabel('\lambda/\lambda_0')
ylabel('Null Shift [\lambda/D]')
grid on

%-- Overlay of trends in x and y null positional offset
figure();
plot(inpar.lambdas/inpar.lambda0,pxy,'-o','Color','r');
hold on
plot(inpar.lambdas/inpar.lambda0,pyy,'-o','Color','b');
legend({'Xshift', 'Yshift'}, 'Location', 'NorthWest');
title(['Charge ' num2str(inpar.charge) ' ' pType ' Vortex Induced Null Movement'])
xlabel('\lambda/\lambda_0')
ylabel('Null Shift [\lambda/D]')
txt = ['Y Shift Slope p = ' num2str(py(1)) newline 'X Shift Slope p = ' num2str(px(1))]; %newline 'x trend p value: ' num2str(px)];
text(1,0.022,txt);
grid on

%% Characterize Wavelength Dependent Null Shift
inpar.lam0OverD = inpar.lambdas(ceil(inpar.numWavelengths / 2)) / inpar.keckD;
dz_trend = pyy*inpar.lam0OverD;
dz_mas_trend = 206265*1000*dz_trend;

simNullShift_actual_mas = Yshift'/inpar.lambdaOverD.*inpar.lambdas/inpar.lambda0*inpar.lam0OverD*206265*1000;
disp('Actual Simulated SVFN induced null shift at every wavelength:');
disp(simNullShift_actual_mas);
disp('Actual Simulated SVFN induced null shift across band:');
disp(simNullShift_actual_mas(end) - simNullShift_actual_mas(1));

disp('Following results are as-indicated by the trendline:');
disp(['on-sky VFN induced null shift across band: ' num2str(206265*1000*(dz_trend(end) - dz_trend(1))) ' milliarcseconds']);
disp('null shift at every wavelength (from origin) in milliarcseconds:');
disp(dz_mas_trend);